{
  "meta": {
    "topic_id": "16267",
    "topic_title": "Recognizing and Refactoring the Arrow Code Anti-Pattern",
    "platform": "instagram",
    "format": "post",
    "content_schema_version": "v1.0.0",
    "model_version": "gemini-2.5-flash",
    "prompt_version": "ig-post-1.3",
    "audience": "intermediate",
    "tone": "clear, confident, non-cringe",
    "locale": "en",
    "primary_keywords": [
      "code refactoring",
      "clean code",
      "software engineering"
    ],
    "secondary_keywords": [
      "design patterns",
      "guard clauses",
      "early return",
      "code smells"
    ],
    "lsi_terms": [
      "conditional logic",
      "cognitive load",
      "strategy pattern"
    ],
    "canonical": "https://example.com/topic/16267",
    "brand": {
      "site_url": "https://example.com/topic/16267",
      "handles": {
        "instagram": "@systemdesign",
        "x": "@systemdesign",
        "linkedin": "@systemdesign",
        "youtube": "@systemdesign",
        "github": "@systemdesign"
      },
      "utm_base": "utm_source=instagram&utm_medium=post"
    },
    "options": {
      "include_images": true,
      "max_length_levels": "standard",
      "variance_seed": "default"
    },
    "keyword_overrides": true,
    "keyword_tiers": {
      "broad": [
        "programming",
        "softwareengineer",
        "codinglife",
        "tech",
        "developer"
      ],
      "niche": [
        "refactoring",
        "cleancode",
        "designpatterns",
        "softwaredevelopment",
        "codereview",
        "antipattern",
        "coderefactor",
        "softwarearchitecture",
        "programmingtips",
        "codequality"
      ],
      "micro_niche": [
        "arrowcode",
        "guardclause",
        "earlyreturn",
        "strategypattern",
        "conditionalstatement",
        "cognitiveload",
        "pythonprogramming",
        "javadevelopment",
        "javascriptdeveloper",
        "oop"
      ],
      "intent": [
        "learncoding",
        "interviewprep",
        "codinginterview"
      ],
      "branded": [
        "systemdesign",
        "systemdesigncommunity"
      ]
    },
    "image_plan": {
      "count": 2,
      "roles": [
        "visual_diagram",
        "visual_typography"
      ],
      "ratio": "4:5",
      "size_px": "1080x1350"
    }
  },
  "content": {
    "visual_concept": "A side-by-side comparison diagram showing nested conditional logic forming an 'arrow' shape vs. a flattened structure using Guard Clauses.",
    "caption": {
      "first_line_hook": "Stop writing code that looks like an arrow pointing to the right—it’s killing your readability and increasing cognitive load.",
      "text": "The 'Arrow Code' anti-pattern is a common **code smell** that plagues many intermediate codebases. It happens when deeply nested **conditional logic** (multiple `if/else` statements) pushes your functional code far to the right, making it difficult to trace and significantly increasing **cognitive load**.\n\nRecognizing this pattern is the first step toward writing truly **clean code** and improving overall **software engineering** practices. Highly nested logic is a breeding ground for bugs and makes future **code refactoring** painful.\n\nHow to flatten the arrow:\n\n1. **Guard Clauses/Early Returns:** Handle failure or prerequisite checks immediately at the top of the function. If a condition fails, return early. This is the simplest way to apply **early return** and eliminate deep nesting.\n2. **Strategy Pattern:** For complex, mutually exclusive business rules, abstract the behavior into separate classes. This powerful **design pattern** manages complexity cleanly.\n\nIf you see more than three levels of indentation for control flow, it’s time to refactor. Master these techniques to level up your development game.\n\nSave this post as a reminder to check your next pull request for arrow code!",
      "cta": "Save & read more → https://example.com/topic/16267?utm_source=instagram&utm_medium=post",
      "seo": {
        "keywords_used": [
          "code refactoring",
          "clean code",
          "software engineering",
          "design patterns",
          "early return"
        ],
        "lsi_terms_used": [
          "conditional logic",
          "cognitive load",
          "strategy pattern"
        ]
      }
    },
    "hashtags": [
      "#programming",
      "#softwareengineer",
      "#codinglife",
      "#tech",
      "#developer",
      "#refactoring",
      "#cleancode",
      "#designpatterns",
      "#softwaredevelopment",
      "#codereview",
      "#antipattern",
      "#coderefactor",
      "#softwarearchitecture",
      "#programmingtips",
      "#codequality",
      "#arrowcode",
      "#guardclause",
      "#earlyreturn",
      "#strategypattern",
      "#conditionalstatement",
      "#cognitiveload",
      "#pythonprogramming",
      "#javadevelopment",
      "#javascriptdeveloper",
      "#oop",
      "#learncoding",
      "#interviewprep",
      "#codinginterview",
      "#systemdesign",
      "#systemdesigncommunity"
    ],
    "hashtags_grouped": {
      "broad": [
        "#programming",
        "#softwareengineer",
        "#codinglife",
        "#tech",
        "#developer"
      ],
      "niche": [
        "#refactoring",
        "#cleancode",
        "#designpatterns",
        "#softwaredevelopment",
        "#codereview",
        "#antipattern",
        "#coderefactor",
        "#softwarearchitecture",
        "#programmingtips",
        "#codequality"
      ],
      "micro_niche": [
        "#arrowcode",
        "#guardclause",
        "#earlyreturn",
        "#strategypattern",
        "#conditionalstatement",
        "#cognitiveload",
        "#pythonprogramming",
        "#javadevelopment",
        "#javascriptdeveloper",
        "#oop"
      ],
      "intent": [
        "#learncoding",
        "#interviewprep",
        "#codinginterview"
      ],
      "branded": [
        "#systemdesign",
        "#systemdesigncommunity"
      ]
    },
    "location_tag_suggestions": [
      {
        "name": "Virtual Developer Community",
        "type": "virtual",
        "reason": "The content is universally applicable to developers working remotely or online."
      }
    ],
    "image_prompts": [
      {
        "role": "visual_diagram",
        "title": "Post Visual A — Minimal Diagram",
        "prompt": "4:5 Instagram diagram for Recognizing and Refactoring the Arrow Code Anti-Pattern. ADAPT to topic: A clear 'Before' (left side) showing deeply nested conditional logic using arrows/indentation that visually forms an arrow shape pointing right. The 'After' (right side) shows a flattened structure using straight, linear code flow and early exit points (Guard Clauses). Layout: Central diagram with 3-5 concise labels, one hero callout chip with key metric/insight 'Reduce Cognitive Load by 70%', scroll-stopping visual. Style: Off-white background (Instagram feed); thin vector strokes (2px); subtle dotted grid; single accent color (Indigo, representing DSA/Programming structure). Typography: Clean sans (Inter/Roboto) 28-36px labels. Safe margins ≥64px. Flat vector. Instagram feed optimized - mobile legible, saves-worthy, visually striking. Export 1080x1350.",
        "negative_prompt": "no photos, no faces, no logos, no neon, no 3D bevels, no gradients >5%, no clutter",
        "style_notes": "diagram-first; clear hierarchy; tight labels",
        "ratio": "4:5",
        "size_px": "1080x1350",
        "alt_text": "Diagram visual emphasizing the key insight of flattening nested code using Guard Clauses."
      },
      {
        "role": "visual_typography",
        "title": "Post Visual B — Typographic Insight Card",
        "prompt": "4:5 Instagram typographic card for Recognizing and Refactoring the Arrow Code Anti-Pattern. ADAPT headline: 'Deep Nesting is a Code Smell. Flatten It.' Layout: Bold 6-10 word headline (60-80px) capturing key insight, small inset micro-diagram motif showing a simple before/after code indentation comparison in corner (10% space), single accent underline with Indigo domain color, generous whitespace (60%). Style: Off-white background (Instagram aesthetic); clean professional aesthetic; editorial feel. Typography: Bold sans (Inter/Roboto). Safe margins ≥64px. Flat vector. Instagram typographic style - scroll-stopping, shareable, saves-worthy. Export 1080x1350.",
        "negative_prompt": "no photos, no heavy gradients, no logos",
        "style_notes": "editorial poster feel; crisp kerning",
        "ratio": "4:5",
        "size_px": "1080x1350",
        "alt_text": "Typographic card with the headline: Deep Nesting is a Code Smell. Flatten It."
      }
    ],
    "compliance": {
      "caption_word_count": 164,
      "first_line_hook_char_count": 105,
      "hashtag_count": 30,
      "image_prompt_count": 2,
      "checks": [
        "caption 120–200 words (150–200 preferred)",
        "strong first line; no 'click more' bait",
        "exactly 30 hashtags (unique; tier-mixed)",
        "image_prompts length == image_plan.count (default 2)",
        "safe margins ≥64px",
        "CTA present once"
      ]
    }
  }
}