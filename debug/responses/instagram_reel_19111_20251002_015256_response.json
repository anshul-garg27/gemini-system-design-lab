{
  "meta": {
    "topic_id": "19111",
    "topic_title": "The Leaky Bucket Algorithm for Traffic Shaping and Rate Limiting",
    "platform": "instagram",
    "format": "reel",
    "content_schema_version": "v1.0.0",
    "model_version": "gemini-2.5-flash",
    "prompt_version": "ig-reel-1.2",
    "audience": "intermediate",
    "tone": "clear, confident, non-cringe",
    "locale": "en",
    "primary_keywords": [
      "rate limiting",
      "leaky bucket",
      "system design",
      "traffic shaping"
    ],
    "secondary_keywords": [
      "distributed systems",
      "scalability",
      "concurrency",
      "api gateway"
    ],
    "lsi_terms": [
      "token bucket",
      "bursty traffic",
      "queue management",
      "performance"
    ],
    "canonical": "https://example.com/topic/19111",
    "brand": {
      "siteUrl": "https://example.com/topic/19111",
      "handles": {
        "instagram": "@systemdesign",
        "x": "@systemdesign",
        "linkedin": "@systemdesign",
        "youtube": "@systemdesign",
        "github": "@systemdesign"
      },
      "utmBase": "utm_source=instagram&utm_medium=reel"
    },
    "options": {
      "include_images": true,
      "max_length_levels": "standard",
      "variance_seed": "default"
    },
    "keyword_overrides": true,
    "keyword_tiers": {
      "broad": [
        "tech",
        "programming",
        "coding",
        "software",
        "engineering"
      ],
      "niche": [
        "systemdesign",
        "architecture",
        "scalability",
        "distributed",
        "microservices"
      ],
      "micro_niche": [
        "ratelimiting",
        "leakybucket",
        "tokenbucket",
        "trafficshaping",
        "apigateway"
      ],
      "intent": [
        "interview",
        "learning",
        "career",
        "skills"
      ],
      "branded": []
    },
    "image_plan": {
      "count": 10,
      "mandatory_roles": [
        "cover_hook",
        "cover_alt",
        "diagram_hero",
        "comparison",
        "stat_card",
        "process_flow",
        "cta_endcard"
      ],
      "domain_specific_roles": [
        "architecture_diagram",
        "algorithm_viz",
        "scale_metrics"
      ],
      "total_images": 10,
      "reasoning": "7 core images + 3 domain-specific images (System Design/DSA) ensure complete visual storytelling for Instagram Reels."
    },
    "accessibility": {
      "captions_included": true,
      "alt_text_all_images": true,
      "color_contrast_checked": true,
      "dyslexic_friendly_fonts": true
    }
  },
  "content": {
    "title": "Leaky Bucket: The Secret Weapon for API Rate Limiting",
    "hook": "Stop letting bursty traffic crash your APIs. The Leaky Bucket algorithm is the secret weapon for guaranteed system stability.",
    "content_segments": [
      {
        "label": "Hook",
        "time_range": "0-3s",
        "narration": "Stop letting bursty traffic crash your APIs. You need the Leaky Bucket algorithm.",
        "on_screen_text": "LEAKY BUCKET: GUARANTEED STABILITY",
        "visuals": "Image 1: Cover Hook. Animated water/traffic flowing into a container.",
        "text_motion": "scale_up_bounce",
        "text_position": "center_upper",
        "b_roll": [
          "water flow animation",
          "traffic spike visual"
        ]
      },
      {
        "label": "Problem",
        "time_range": "3-10s",
        "narration": "High volume spikes destroy system stability, leading to 503 errors and massive latency. We need a way to smooth the flow of requests.",
        "on_screen_text": "Traffic Spikes = 503 Errors",
        "visuals": "Image 8: Architecture Diagram showing a red bottleneck at the API gateway.",
        "text_motion": "slide_up_fade",
        "text_position": "center",
        "b_roll": [
          "chart flash of latency spike",
          "red highlight on bottleneck"
        ]
      },
      {
        "label": "Solution",
        "time_range": "10-45s",
        "narration": "The Leaky Bucket treats requests like water flowing into a fixed-size container. Here are the three steps to guaranteed stability.",
        "on_screen_text": "3 Steps to Stability",
        "visuals": "Image 3: Diagram Hero (Leaky Bucket). Zoom transition.",
        "text_motion": "pop_in",
        "text_position": "center",
        "b_roll": [
          "diagram pan",
          "metric callouts",
          "before/after"
        ]
      },
      {
        "label": "Solution Detail 1: Input",
        "time_range": "15-20s",
        "narration": "Step one: Incoming requests are queued up in the bucket. Bursty traffic is temporarily absorbed.",
        "on_screen_text": "1. QUEUE INPUT (ABSORB BURSTS)",
        "visuals": "Image 9: Algorithm Viz showing requests filling the bucket.",
        "text_motion": "pop_in",
        "text_position": "center"
      },
      {
        "label": "Solution Detail 2: Leak Rate",
        "time_range": "20-30s",
        "narration": "Step two: The bucket has a constant leak rate. This enforces a uniform output flow, ensuring your downstream services never get overwhelmed.",
        "on_screen_text": "2. CONSTANT LEAK RATE (SMOOTH OUTPUT)",
        "visuals": "Image 6: Process Flow (Step 2/3). Animated arrow showing steady output.",
        "text_motion": "pop_in",
        "text_position": "center"
      },
      {
        "label": "Solution Detail 3: Overflow",
        "time_range": "30-40s",
        "narration": "Step three: If the bucket fills completely, any excess requests are dropped. This prevents resource exhaustion and system collapse. ",
        "on_screen_text": "3. OVERFLOW (DROP EXCESS)",
        "visuals": "Image 10: Scale Metrics/Stat Card showing dropped requests.",
        "text_motion": "pop_in",
        "text_position": "center"
      },
      {
        "label": "Comparison",
        "time_range": "40-45s",
        "narration": "Remember, Leaky Bucket guarantees a uniform rate, making it ideal for traffic shaping, unlike Token Bucket which allows bursts.",
        "on_screen_text": "Leaky Bucket vs Token Bucket",
        "visuals": "Image 4: Comparison Chart.",
        "text_motion": "slide_up_fade",
        "text_position": "center"
      },
      {
        "label": "CTA",
        "time_range": "45-55s",
        "narration": "Master rate limiting for your next interview. Save this guide and follow for more essential system design insights!",
        "on_screen_text": "SAVE ðŸ’¾ | FOLLOW @SYSTEMDESIGN",
        "visuals": "Image 7: CTA Endcard frame with brand handle.",
        "text_motion": "fade_in_out",
        "text_position": "center_lower",
        "b_roll": [
          "logo-free end card motif"
        ]
      }
    ],
    "script": "[0:00] Stop letting bursty traffic crash your APIs. You need the Leaky Bucket algorithm. [0:03] High volume spikes destroy system stability, leading to 503 errors and massive latency. We need a way to smooth the flow of requests. [0:10] The Leaky Bucket treats requests like water flowing into a fixed-size container. Here are the three steps to guaranteed stability. [0:15] Step one: Incoming requests are queued up in the bucket. Bursty traffic is temporarily absorbed. [0:20] Step two: The bucket has a constant leak rate. This enforces a uniform output flow, ensuring your downstream services never get overwhelmed. [0:30] Step three: If the bucket fills completely, any excess requests are dropped. This prevents resource exhaustion and system collapse. [0:40] Remember, Leaky Bucket guarantees a uniform rate, making it ideal for traffic shaping, unlike Token Bucket which allows bursts. [0:45] Master rate limiting for your next interview. Save this guide and follow for more essential system design insights!",
    "on_screen_text_cues": [
      "0-3s: LEAKY BUCKET: GUARANTEED STABILITY",
      "3-10s: Traffic Spikes = 503 Errors",
      "10-15s: 3 Steps to Stability",
      "15-20s: 1. QUEUE INPUT (ABSORB BURSTS)",
      "20-30s: 2. CONSTANT LEAK RATE (SMOOTH OUTPUT)",
      "30-40s: 3. OVERFLOW (DROP EXCESS)",
      "40-45s: Leaky Bucket vs Token Bucket",
      "45-55s: SAVE ðŸ’¾ | FOLLOW @SYSTEMDESIGN"
    ],
    "transitions": [
      {
        "from_segment": "Hook",
        "to_segment": "Problem",
        "type": "hard_cut",
        "timing": "3.0s",
        "effect": "text_swipe_left"
      },
      {
        "from_segment": "Problem",
        "to_segment": "Solution",
        "type": "zoom_in",
        "timing": "10.0s",
        "effect": "diagram_reveal"
      },
      {
        "from_segment": "Solution",
        "to_segment": "Solution Detail 1: Input",
        "type": "hard_cut",
        "timing": "15.0s",
        "effect": "color_flash_pattern_interrupt"
      },
      {
        "from_segment": "Solution Detail 1: Input",
        "to_segment": "Solution Detail 2: Leak Rate",
        "type": "hard_cut",
        "timing": "20.0s",
        "effect": "visual_update"
      },
      {
        "from_segment": "Solution Detail 2: Leak Rate",
        "to_segment": "Solution Detail 3: Overflow",
        "type": "hard_cut",
        "timing": "30.0s",
        "effect": "visual_update"
      },
      {
        "from_segment": "Solution Detail 3: Overflow",
        "to_segment": "Comparison",
        "type": "hard_cut",
        "timing": "40.0s",
        "effect": "comparison_split_screen"
      },
      {
        "from_segment": "Comparison",
        "to_segment": "CTA",
        "type": "fade",
        "timing": "45.0s",
        "effect": "endcard_fade_in"
      }
    ],
    "text_animations": [
      {
        "time_range": "0-3s",
        "text": "LEAKY BUCKET: GUARANTEED STABILITY",
        "animation_in": "scale_up_bounce",
        "animation_out": "fade_out",
        "position": "center_upper",
        "size_px": 120,
        "color": "#4F46E5",
        "duration_in": "0.5s",
        "duration_out": "0.3s",
        "appears_at": "0.0s",
        "disappears_at": "3.3s"
      },
      {
        "time_range": "3-10s",
        "text": "Traffic Spikes = 503 Errors",
        "animation_in": "slide_up_fade",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 80,
        "color": "#0EA5E9",
        "duration_in": "0.4s",
        "duration_out": "0.5s",
        "appears_at": "3.0s",
        "disappears_at": "10.5s"
      },
      {
        "time_range": "10-15s",
        "text": "3 Steps to Stability",
        "animation_in": "pop_in",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 90,
        "color": "#4F46E5",
        "duration_in": "0.3s",
        "duration_out": "0.5s",
        "appears_at": "10.0s",
        "disappears_at": "15.3s"
      },
      {
        "time_range": "15-20s",
        "text": "1. QUEUE INPUT (ABSORB BURSTS)",
        "animation_in": "pop_in",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 70,
        "color": "#06B6D4",
        "duration_in": "0.3s",
        "duration_out": "0.5s",
        "appears_at": "15.0s",
        "disappears_at": "20.5s"
      },
      {
        "time_range": "20-30s",
        "text": "2. CONSTANT LEAK RATE (SMOOTH OUTPUT)",
        "animation_in": "pop_in",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 70,
        "color": "#06B6D4",
        "duration_in": "0.3s",
        "duration_out": "0.5s",
        "appears_at": "20.0s",
        "disappears_at": "30.5s"
      },
      {
        "time_range": "30-40s",
        "text": "3. OVERFLOW (DROP EXCESS)",
        "animation_in": "pop_in",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 70,
        "color": "#06B6D4",
        "duration_in": "0.3s",
        "duration_out": "0.5s",
        "appears_at": "30.0s",
        "disappears_at": "40.5s"
      },
      {
        "time_range": "40-45s",
        "text": "Leaky Bucket vs Token Bucket",
        "animation_in": "slide_up_fade",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 80,
        "color": "#0EA5E9",
        "duration_in": "0.4s",
        "duration_out": "0.5s",
        "appears_at": "40.0s",
        "disappears_at": "45.5s"
      },
      {
        "time_range": "45-55s",
        "text": "SAVE ðŸ’¾ | FOLLOW @SYSTEMDESIGN",
        "animation_in": "fade_in",
        "animation_out": "fade_out",
        "position": "center_lower",
        "size_px": 100,
        "color": "#4F46E5",
        "duration_in": "0.5s",
        "duration_out": "0.3s",
        "appears_at": "45.0s",
        "disappears_at": "55.0s"
      }
    ],
    "pacing": {
      "edit_frequency_seconds": 1.7,
      "pattern_interrupt_at": 15,
      "scene_count": 8,
      "avg_scene_duration": 6.875,
      "total_cuts": 28
    },
    "first_frame": {
      "description": "Bold hook text 'LEAKY BUCKET: GUARANTEED STABILITY' with a simplified diagram of a bucket receiving high input and having steady output, utilizing Indigo and Sky accent colors.",
      "text_readable_at_thumbnail": true,
      "visually_striking": true,
      "text_size_px": 140,
      "includes": "hook_text + topic_visual + accent_color"
    },
    "loop_potential": {
      "enabled": true,
      "last_frame_connects_to_first": true,
      "rewatch_trigger": "The final comparison (Leaky vs Token) leads back to the core stability promise in the hook.",
      "callback_element": "Reference hook concept (stability) in final CTA"
    },
    "visual_plan": {
      "camera": "static screen capture â†’ diagram pan â†’ close-up on key metric",
      "motion_graphics": [
        "type-on keywords",
        "arrow flow animation",
        "red/green color coding for comparison"
      ],
      "color_palette": "Off-white (#FAFAFA) bg, Ink Black, Indigo (#4F46E5), Sky (#0EA5E9)",
      "safe_margins": "keep titles â‰¥96px from edges (1080x1920)"
    },
    "trending_audio": {
      "vibe": [
        "energetic tech",
        "clean minimal",
        "future garage"
      ],
      "bpm_range": "90â€“120",
      "search_terms": [
        "\"trending\" minimal tech beat",
        "instrumental future garage",
        "clean build no vocals"
      ],
      "example_hook_lines": [
        "tight snare build",
        "subtle drop at ~8s"
      ],
      "beat_markers_seconds": [
        0,
        3,
        10,
        15,
        20,
        30,
        40,
        45
      ],
      "sync_points": [
        {
          "beat": 0,
          "action": "hook_text_pop"
        },
        {
          "beat": 3,
          "action": "problem_reveal"
        },
        {
          "beat": 10,
          "action": "solution_point_1"
        },
        {
          "beat": 15,
          "action": "pattern_interrupt"
        },
        {
          "beat": 20,
          "action": "solution_point_2"
        },
        {
          "beat": 30,
          "action": "solution_point_3"
        },
        {
          "beat": 45,
          "action": "cta_fade_in"
        }
      ],
      "drop_moment": "15s",
      "energy_curve": "build_0-15s, sustain_15-40s, outro_40-55s"
    },
    "call_to_action": "Follow for more system design tips!",
    "engagement_tactics": {
      "comment_bait": "Which rate limiter (Leaky or Token) do you prefer for high-volume APIs? Drop a comment! ðŸ‘‡",
      "save_trigger": "Save this for your next system design interview ðŸ’¾",
      "share_trigger": "Tag someone building scalable systems! ðŸ”¥",
      "pattern_interrupt": "Color flash + zoom at 15s mark when revealing Step 1.",
      "loop_element": "CTA references core stability promise, encouraging rewatch"
    },
    "caption_structured": {
      "hook_125chars": "Stop letting bursty traffic crash your APIs. The Leaky Bucket algorithm is the secret weapon for guaranteed system stability.",
      "problem_statement": "Uncontrolled traffic spikes lead to devastating latency and service outages. If you're building a scalable distributed system, handling these bursts is non-negotiable. Traditional throttling often fails to smooth the flow effectively.",
      "solution_tease": "Learn the three core steps of the Leaky Bucket algorithm and why it guarantees a constant output rate for traffic shaping.",
      "value_props": [
        "âœ“ Guarantees constant output rate for traffic shaping.",
        "âœ“ Prevents resource exhaustion during traffic bursts.",
        "âœ“ Essential knowledge for any system design interview."
      ],
      "keywords_woven": "The Leaky Bucket approach is crucial for reliable rate limiting and scalability in modern distributed systems, especially at the API gateway level.",
      "comment_bait": "Which rate limiter (Leaky or Token) do you prefer for high-volume APIs? Drop a comment! ðŸ‘‡",
      "cta": "Save this ðŸ’¾ + Follow @systemdesign for more deep dives!",
      "link": "https://example.com/topic/19111?utm_source=instagram&utm_medium=reel"
    },
    "caption": "Stop letting bursty traffic crash your APIs. The Leaky Bucket algorithm is the secret weapon for guaranteed system stability.\n\nUncontrolled traffic spikes lead to devastating latency and service outages. If you're building a scalable distributed system, handling these bursts is non-negotiable. Traditional throttling often fails to smooth the flow effectively.\n\nLearn the three core steps of the Leaky Bucket algorithm and why it guarantees a constant output rate for traffic shaping. The Leaky Bucket approach is crucial for reliable rate limiting and scalability in modern distributed systems, especially at the API gateway level.\n\nâœ“ Guarantees constant output rate for traffic shaping.\nâœ“ Prevents resource exhaustion during traffic bursts.\nâœ“ Essential knowledge for any system design interview.\n\nWhich rate limiter (Leaky or Token) do you prefer for high-volume APIs? Drop a comment! ðŸ‘‡\n\nSave this ðŸ’¾ + Follow @systemdesign for more deep dives! Full guide: https://example.com/topic/19111?utm_source=instagram&utm_medium=reel",
    "hashtags": [
      "#systemdesign",
      "#ratelimiting",
      "#leakybucket",
      "#trafficshaping",
      "#scalability",
      "#distributed",
      "#microservices",
      "#architecture",
      "#backend",
      "#softwareengineering",
      "#coding",
      "#programming",
      "#devops",
      "#api",
      "#cloud",
      "#concurrency",
      "#performance",
      "#techinterview",
      "#interviewprep",
      "#learning",
      "#engineering",
      "#datastructures",
      "#algorithms",
      "#loadbalancing",
      "#caching",
      "#techskills",
      "#computerscience",
      "#systemarchitecture",
      "#apigateway",
      "#tokenbucket"
    ],
    "music_suggestion": "Energetic tech beat, 90-120 BPM, minimal instrumental",
    "image_prompts": [
      {
        "role": "cover_hook",
        "title": "Reel Cover â€” Hook Driven (Main)",
        "prompt": "VERTICAL 9:16 Instagram Reel cover for 'The Leaky Bucket Algorithm for Traffic Shaping and Rate Limiting'. FIRST FRAME OPTIMIZED for thumbnail and scroll-stopping. COMPOSITION: Top 25%: Bold hook text 'LEAKY BUCKET: GUARANTEED STABILITY' in 140px geometric sans, Indigo (#4F46E5) accent color. Middle 50%: Simplified vector visualization of a bucket filling quickly but dripping steadily, emphasizing the smoothing function. Vertical flow, thin lines (2px), 3 labeled elements (Input, Bucket, Output). Bottom 25%: Subtle brand mark + micro CTA hint. TECHNICAL SPECS: Background: Off-white (#FAFAFA). Safe margins: â‰¥96px all sides. Text contrast: 4.5:1 minimum. Thumbnail readable. Designed for MUTED viewing. STYLE: Flat vector, elegant minimalism, Indigo/Sky palette.",
        "negative_prompt": "no clutter, no busy backgrounds, no photoreal faces, no brand logos except tiny watermark, no neon, no 3D bevels, no fake UI chrome, no stock icon noise, no gradients >5%, no drop shadows, no text baked into complex diagram",
        "style_notes": "Whiteboard-meets-editorial; technical yet accessible; elegant minimalism; thumbnail-optimized",
        "accessibility": {
          "alt_text": "Instagram Reel cover for The Leaky Bucket Algorithm with bold hook text 'LEAKY BUCKET: GUARANTEED STABILITY' and simplified diagram showing steady output.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Dyslexic-friendly geometric sans"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "cover_alt",
        "title": "Reel Cover Alt â€” Typography Focus (A/B Test)",
        "prompt": "Alternative vertical cover for A/B testing. TYPOGRAPHY-FOCUSED design for 'The Leaky Bucket Algorithm for Traffic Shaping and Rate Limiting'. LAYOUT: Minimalist, text-first approach. Center-aligned 2-line hook: 'Rate Limiting Mastered: The Leaky Bucket'. Underline 'Leaky Bucket'. Small visual element of steady water dripping on the side. STYLE: Same Indigo/Sky color palette, more whitespace, bolder typography. Still readable at thumbnail size. Same technical specs as cover_hook.",
        "negative_prompt": "no clutter, no busy backgrounds, no photoreal faces, no brand logos except tiny watermark, no neon, no 3D bevels, no fake UI chrome, no stock icon noise, no gradients >5%, no drop shadows, no text baked into complex diagram",
        "style_notes": "Editorial poster; strong kerning; minimal visual noise; text-centric",
        "accessibility": {
          "alt_text": "Alternative Reel cover with typographic emphasis: 'Rate Limiting Mastered: The Leaky Bucket'",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Dyslexic-friendly"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "diagram_hero",
        "title": "Core Concept Diagram (Primary Teaching Visual)",
        "prompt": "Vertical hero diagram for 'The Leaky Bucket Algorithm'. PRIMARY EDUCATIONAL VISUAL. COMPOSITION: Main concept visualization occupying middle 60%. A large stylized bucket with an input pipe (labeled 'Bursty Traffic') and a small, constant output pipe (labeled 'Constant Rate'). Show excess requests visually bouncing off the top. Clear labels, thin strokes, Sky Blue (#0EA5E9) accent color.",
        "negative_prompt": "no 3D, no photos, no clutter, no decorative elements that distract from learning",
        "style_notes": "Diagram-first; educational clarity; high legibility; concept over aesthetics",
        "accessibility": {
          "alt_text": "Diagram explaining core concept of The Leaky Bucket Algorithm showing bursty input being smoothed to a constant output rate.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear labels, dyslexic-friendly"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "comparison",
        "title": "Leaky Bucket vs Token Bucket Comparison",
        "prompt": "Split vertical comparison chart showing 'Leaky Bucket' (left, focus on uniform output) vs 'Token Bucket' (right, focus on allowing bursts). LAYOUT: Vertical split with a line graph overlaying both halves. Left graph shows a smooth, flat output line (Green/Blue). Right graph shows a spiky, bursty output line (Orange/Red). Title the sections clearly. Key takeaway text in the middle divider area: 'UNIFORMITY vs BURSTS'. Use Indigo and Sky palette.",
        "negative_prompt": "no clutter, no 3D, no confusing layouts",
        "style_notes": "Clear contrast; easy comparison; visual distinction between options",
        "accessibility": {
          "alt_text": "Comparison showing Leaky Bucket (smooth output) versus Token Bucket (bursty output) using line graphs.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear labels"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "stat_card",
        "title": "Key Metrics/Numbers Visualization (Smoothing)",
        "prompt": "Bold stat card for 'The Leaky Bucket Algorithm'. NUMBER-FIRST design. LAYOUT: Center-focused. Large text '100%' at center in Indigo (#4F46E5). Context text above: 'Guaranteed Output Rate'. Supporting visual element showing a highly fluctuating input line transforming into a perfectly flat output line. PURPOSE: Make key metric memorable and impressive. Same technical specs.",
        "negative_prompt": "no clutter, no stock icons, no decorative fluff",
        "style_notes": "Number-first; high impact; memorable; clear context",
        "accessibility": {
          "alt_text": "Stat card highlighting '100% Guaranteed Output Rate' achieved by the Leaky Bucket Algorithm.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Large numbers, clear context"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "process_flow",
        "title": "Step-by-Step Request Flow",
        "prompt": "Vertical flow diagram for the Leaky Bucket algorithm's execution. STEP-BY-STEP PROCESS. LAYOUT: 3 steps stacked vertically. Step 1: Request In (Queue). Step 2: Check Capacity. Step 3: Serve (Leak) or Drop (Overflow). Arrows connecting steps top-to-bottom. Clean, minimal, educational, using Sky Blue for flow lines.",
        "negative_prompt": "no clutter, no 3D, no complex diagrams",
        "style_notes": "Flow-focused; clear progression; numbered steps; easy to follow",
        "accessibility": {
          "alt_text": "Process flow diagram showing 3 steps of the Leaky Bucket: Queue, Check Capacity, Serve or Drop.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Step numbers and labels clear"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "cta_endcard",
        "title": "Call-to-Action Endcard (Final Frame)",
        "prompt": "Final CTA endcard for 'The Leaky Bucket Algorithm'. ACTION-ORIENTED design. LAYOUT: Center-focused. Bold CTA text at center: 'SAVE THIS FOR YOUR NEXT INTERVIEW ðŸ’¾'. Brand handle @systemdesign clearly visible at the bottom. Small icons for Save/Follow/Share actions. Clean, minimal, Indigo accent color.",
        "negative_prompt": "no clutter, no busy backgrounds, no multiple competing CTAs",
        "style_notes": "CTA-first; clear single action; brand visible; action-oriented",
        "accessibility": {
          "alt_text": "Call-to-action endcard prompting users to Save and Follow @systemdesign.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear CTA text"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "architecture_diagram",
        "title": "Rate Limiter Placement in System Architecture",
        "prompt": "Vertical system architecture diagram showing where the Leaky Bucket Rate Limiter sits. LAYOUT: Three main components stacked: 1. Client/Internet Traffic (Bursty Input). 2. API Gateway/Rate Limiter (The Bucket). 3. Backend Services (Steady Output). Use arrows to show the flow. Highlight the API Gateway component with a bright Indigo border, signifying its critical role.",
        "negative_prompt": "no clutter, no unnecessary components, no complex cloud icons",
        "style_notes": "System diagram clarity; focus on component relationships; clean vector style.",
        "accessibility": {
          "alt_text": "System architecture diagram showing the Leaky Bucket Rate Limiter placed at the API Gateway to manage traffic before reaching backend services.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear labels"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "algorithm_viz",
        "title": "Queue and Drop Visualization",
        "prompt": "Detailed vertical algorithm visualization focusing on the queue management aspect of the Leaky Bucket. Show a queue (the bucket) filling up rapidly, then a steady output stream leaving the bottom. Simultaneously, show two requests failing/dropping when the queue reaches maximum capacity, represented by a red X mark. Title: 'Queue Management & Overflow'.",
        "negative_prompt": "no confusing labels, no unrelated math formulas, no 3D water physics",
        "style_notes": "Educational visualization; focused on queue behavior; clear overflow indicator.",
        "accessibility": {
          "alt_text": "Algorithm visualization showing requests filling a queue (the bucket) and excess requests being dropped when capacity is reached.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear labels"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "scale_metrics",
        "title": "Input vs Output Throughput Graph",
        "prompt": "Vertical line graph visualization comparing Input QPS (Requests Per Second) versus Output QPS. The Input line should be extremely volatile (spikes up to 10,000 QPS). The Output line should be flat and stable at a lower threshold (e.g., 1,000 QPS). Title: 'Traffic Shaping in Action'. Use high-contrast colors (Red for Input, Sky Blue for Output).",
        "negative_prompt": "no cluttered axes, no unnecessary data points, no 3D charts",
        "style_notes": "Data visualization; high impact comparison; clear performance metric.",
        "accessibility": {
          "alt_text": "Line graph showing how Leaky Bucket smooths traffic: volatile input QPS (red) is converted to stable output QPS (blue).",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear axis labels"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      }
    ],
    "accessibility": {
      "auto_captions": [
        {
          "time": "0-3s",
          "text": "Stop letting bursty traffic crash your APIs. You need the Leaky Bucket algorithm."
        },
        {
          "time": "3-10s",
          "text": "High volume spikes destroy system stability, leading to 503 errors and massive latency. We need a way to smooth the flow of requests."
        },
        {
          "time": "10-15s",
          "text": "The Leaky Bucket treats requests like water flowing into a fixed-size container. Here are the three steps to guaranteed stability."
        },
        {
          "time": "15-20s",
          "text": "Step one: Incoming requests are queued up in the bucket. Bursty traffic is temporarily absorbed."
        },
        {
          "time": "20-30s",
          "text": "Step two: The bucket has a constant leak rate. This enforces a uniform output flow, ensuring your downstream services never get overwhelmed."
        },
        {
          "time": "30-40s",
          "text": "Step three: If the bucket fills completely, any excess requests are dropped. This prevents resource exhaustion and system collapse."
        },
        {
          "time": "40-45s",
          "text": "Remember, Leaky Bucket guarantees a uniform rate, making it ideal for traffic shaping, unlike Token Bucket which allows bursts."
        },
        {
          "time": "45-55s",
          "text": "Master rate limiting for your next interview. Save this guide and follow for more essential system design insights!"
        }
      ],
      "alt_texts_provided": true,
      "color_contrast_validated": true,
      "audio_descriptions": [
        "Visual shows architecture diagram highlighting the bottleneck.",
        "Animated diagram shows requests entering and leaving the leaky bucket at a steady rate.",
        "Comparison chart contrasts the smooth output of Leaky Bucket versus the bursty output of Token Bucket.",
        "Final frame shows CTA text and social media handles."
      ]
    },
    "compliance": {
      "est_duration_seconds": 55,
      "script_word_count": 115,
      "hook_char_count": 105,
      "hashtag_count": 30,
      "image_count": 10,
      "checks": [
        "â‰¤150 words script",
        "â‰¤120 chars hook",
        "CTA present once",
        "30 unique hashtags",
        "mobile-safe margins â‰¥96px",
        "image_prompts length â‰¥7 (7 core + domain-specific)",
        "all images have accessibility object",
        "text_animations provided for all on_screen_text",
        "transitions specified between all segments",
        "engagement_tactics all present",
        "auto_captions with timestamps",
        "first_frame optimized for thumbnail",
        "pattern_interrupt at 15-20s",
        "music_sync_points aligned to beats",
        "caption_structured format followed",
        "all 7 core image roles present: cover_hook, cover_alt, diagram_hero, comparison, stat_card, process_flow, cta_endcard"
      ]
    }
  }
}