{
  "meta": {
    "topic_id": "19111",
    "topic_title": "The Leaky Bucket Algorithm for Traffic Shaping and Rate Limiting",
    "platform": "instagram",
    "format": "reel",
    "content_schema_version": "v1.0.0",
    "model_version": "gemini-2.5-flash",
    "prompt_version": "ig-reel-1.2",
    "audience": "intermediate",
    "tone": "clear, confident, non-cringe",
    "locale": "en",
    "primary_keywords": [
      "Leaky Bucket",
      "Rate Limiting",
      "Traffic Shaping"
    ],
    "secondary_keywords": [
      "System Design",
      "Scalability",
      "Distributed Systems"
    ],
    "lsi_terms": [
      "Token Bucket",
      "API Gateway",
      "Concurrency"
    ],
    "canonical": "https://example.com/topic/19111",
    "brand": {
      "siteUrl": "https://example.com/topic/19111",
      "handles": {
        "instagram": "@systemdesign",
        "x": "@systemdesign",
        "linkedin": "@systemdesign",
        "youtube": "@systemdesign",
        "github": "@systemdesign"
      },
      "utmBase": "utm_source=instagram&utm_medium=reel"
    },
    "options": {
      "include_images": true,
      "max_length_levels": "standard",
      "variance_seed": "default"
    },
    "keyword_overrides": true,
    "keyword_tiers": {
      "broad": [
        "tech",
        "programming",
        "coding",
        "software",
        "engineering"
      ],
      "niche": [
        "systemdesign",
        "architecture",
        "scalability",
        "distributed",
        "microservices"
      ],
      "micro_niche": [
        "ratelimiting",
        "leakybucket",
        "trafficshaping",
        "api",
        "concurrency"
      ],
      "intent": [
        "interview",
        "learning",
        "career",
        "skills"
      ],
      "branded": []
    },
    "image_plan": {
      "count": 10,
      "mandatory_roles": [
        "cover_hook",
        "cover_alt",
        "diagram_hero",
        "comparison",
        "stat_card",
        "process_flow",
        "cta_endcard"
      ],
      "domain_specific_roles": [
        "architecture_diagram",
        "data_flow",
        "scale_metrics"
      ],
      "total_images": 10,
      "reasoning": "7 core images + 3 System Design domain-specific images ensure complete visual storytelling and technical depth."
    },
    "accessibility": {
      "captions_included": true,
      "alt_text_all_images": true,
      "color_contrast_checked": true,
      "dyslexic_friendly_fonts": true
    }
  },
  "content": {
    "title": "Leaky Bucket Algorithm: The Secret to Stable APIs",
    "hook": "Stop letting bursty traffic crash your services. You need robust rate limiting.",
    "content_segments": [
      {
        "label": "Hook",
        "time_range": "0-3s",
        "narration": "Stop letting bursty traffic crash your services. You need robust rate limiting.",
        "on_screen_text": "STOP BURSTY TRAFFIC SPIKES",
        "visuals": "Image 1: Cover Hook. Animated red line graph spiking rapidly.",
        "text_motion": "scale_up_bounce",
        "text_position": "center_upper",
        "b_roll": [
          "traffic spike visualization",
          "server error icon flash"
        ]
      },
      {
        "label": "Problem",
        "time_range": "3-10s",
        "narration": "Uncontrolled traffic spikes lead to resource exhaustion, 503 errors, and massive instability. The challenge is smoothing out the flow.",
        "on_screen_text": "The Problem: Resource Exhaustion",
        "visuals": "Image 2: Architecture Diagram. Highlighted bottleneck component.",
        "text_motion": "slide_up_fade",
        "text_position": "center",
        "b_roll": [
          "503 error overlay",
          "server overload animation"
        ]
      },
      {
        "label": "Solution",
        "time_range": "10-45s",
        "narration": "Enter the Leaky Bucket Algorithm. It’s simple, effective, and guarantees a constant output rate. Think of it as a physical bucket. Incoming requests are water drops. If the bucket overflows, the request is dropped immediately. The bucket has a constant leak rate, representing the maximum processing capacity. This ensures output traffic is always uniform, regardless of input bursts. Unlike the Token Bucket, Leaky Bucket strictly enforces traffic shaping, smoothing out those sudden spikes. Use Leaky Bucket at your API gateway or load balancer to protect critical downstream services from overload.",
        "on_screen_text": "1. Simple Queue Limit | 2. Constant Leak Rate | 3. Traffic Shaping",
        "visuals": "Images 3-9 sequence: Diagram Hero (10s), Pattern Interrupt (15s), Process Flow (20s), Data Flow (30s), Comparison (38s). Fast cuts between visuals.",
        "text_motion": "pop_in",
        "text_position": "center",
        "b_roll": [
          "diagram pan",
          "metric callouts",
          "before/after"
        ]
      },
      {
        "label": "CTA",
        "time_range": "45-50s",
        "narration": "Protect your system stability. Save this reel and follow for more deep dives into system architecture!",
        "on_screen_text": "Save & Follow @systemdesign",
        "visuals": "Image 10: CTA Endcard frame with brand handle.",
        "text_motion": "fade_in_out",
        "text_position": "center_lower",
        "b_roll": [
          "logo-free end card motif"
        ]
      }
    ],
    "script": "[0:00] Stop letting bursty traffic crash your services. You need robust rate limiting. [0:03] Uncontrolled traffic spikes lead to resource exhaustion, 503 errors, and massive instability. The challenge is smoothing out the flow. [0:10] Enter the Leaky Bucket Algorithm. It’s simple, effective, and guarantees a constant output rate. [0:15] Think of it as a physical bucket. Incoming requests are water drops. If the bucket overflows, the request is dropped immediately. [0:22] The bucket has a constant leak rate, representing the maximum processing capacity. This ensures output traffic is always uniform, regardless of input bursts. [0:30] Unlike the Token Bucket, Leaky Bucket strictly enforces traffic shaping, smoothing out those sudden spikes. [0:38] Use Leaky Bucket at your API gateway or load balancer to protect critical downstream services from overload. [0:45] Protect your system stability. Save this reel and follow for more deep dives into system architecture!",
    "on_screen_text_cues": [
      "0-3s: STOP BURSTY TRAFFIC SPIKES (scale_up_bounce)",
      "3-10s: The Problem: Resource Exhaustion (slide_up_fade)",
      "10-20s: 1. Simple Queue Limit (pop_in)",
      "20-35s: 2. Constant Leak Rate (pop_in)",
      "35-45s: 3. Traffic Shaping (pop_in)",
      "45-50s: Save & Follow @systemdesign (fade_in)"
    ],
    "transitions": [
      {
        "from_segment": "Hook",
        "to_segment": "Problem",
        "type": "hard_cut",
        "timing": "3.0s",
        "effect": "text_swipe_left"
      },
      {
        "from_segment": "Problem",
        "to_segment": "Solution",
        "type": "zoom_in",
        "timing": "10.0s",
        "effect": "diagram_reveal"
      },
      {
        "from_segment": "Solution",
        "to_segment": "CTA",
        "type": "fade",
        "timing": "45.0s",
        "effect": "endcard_fade_in"
      }
    ],
    "text_animations": [
      {
        "time_range": "0-3s",
        "text": "STOP BURSTY TRAFFIC SPIKES",
        "animation_in": "scale_up_bounce",
        "animation_out": "fade_out",
        "position": "center_upper",
        "size_px": 120,
        "color": "accent_primary",
        "duration_in": "0.5s",
        "duration_out": "0.3s",
        "appears_at": "0.0s",
        "disappears_at": "3.3s"
      },
      {
        "time_range": "3-10s",
        "text": "The Problem: Resource Exhaustion",
        "animation_in": "slide_up_fade",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 80,
        "color": "white",
        "duration_in": "0.5s",
        "duration_out": "0.3s",
        "appears_at": "3.0s",
        "disappears_at": "10.3s"
      },
      {
        "time_range": "10-20s",
        "text": "1. Simple Queue Limit",
        "animation_in": "pop_in",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 70,
        "color": "accent_primary",
        "duration_in": "0.3s",
        "duration_out": "0.3s",
        "appears_at": "10.0s",
        "disappears_at": "15.3s"
      },
      {
        "time_range": "20-35s",
        "text": "2. Constant Leak Rate",
        "animation_in": "pop_in",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 70,
        "color": "accent_primary",
        "duration_in": "0.3s",
        "duration_out": "0.3s",
        "appears_at": "20.0s",
        "disappears_at": "30.3s"
      },
      {
        "time_range": "35-45s",
        "text": "3. Traffic Shaping",
        "animation_in": "pop_in",
        "animation_out": "fade_out",
        "position": "center",
        "size_px": 70,
        "color": "accent_primary",
        "duration_in": "0.3s",
        "duration_out": "0.3s",
        "appears_at": "30.3s",
        "disappears_at": "45.3s"
      },
      {
        "time_range": "45-50s",
        "text": "Save & Follow @systemdesign",
        "animation_in": "fade_in_out",
        "animation_out": "fade_out",
        "position": "center_lower",
        "size_px": 90,
        "color": "white",
        "duration_in": "0.5s",
        "duration_out": "0.3s",
        "appears_at": "45.0s",
        "disappears_at": "50.0s"
      }
    ],
    "pacing": {
      "edit_frequency_seconds": 1.7,
      "pattern_interrupt_at": 15,
      "scene_count": 10,
      "avg_scene_duration": 5.0,
      "total_cuts": 28
    },
    "first_frame": {
      "description": "Bold hook text 'STOP BURSTY TRAFFIC SPIKES' with a simplified Leaky Bucket diagram, using Indigo/Sky Blue accent color.",
      "text_readable_at_thumbnail": true,
      "visually_striking": true,
      "text_size_px": 140,
      "includes": "hook_text + topic_visual + accent_color"
    },
    "loop_potential": {
      "enabled": true,
      "last_frame_connects_to_first": true,
      "rewatch_trigger": "The CTA asks the user to save the solution to the problem presented in the hook.",
      "callback_element": "Reference hook concept (stability/traffic spikes) in final CTA."
    },
    "visual_plan": {
      "camera": "close-up on diagrams → wide shot of comparison chart → screen capture",
      "motion_graphics": [
        "data flow arrows",
        "type-on keywords",
        "graph animation"
      ],
      "color_palette": "Off-white (#FAFAFA) background, Indigo (#4F46E5) text/accents, Sky Blue (#0EA5E9) highlights.",
      "safe_margins": "keep titles ≥96px from edges (1080x1920)"
    },
    "trending_audio": {
      "vibe": [
        "energetic tech",
        "clean minimal",
        "future garage"
      ],
      "bpm_range": "90–120",
      "search_terms": [
        "\"trending\" minimal tech beat",
        "instrumental future garage",
        "clean build no vocals"
      ],
      "example_hook_lines": [
        "tight snare build",
        "subtle drop at ~8s"
      ],
      "beat_markers_seconds": [
        0,
        3,
        10,
        15,
        22,
        30,
        40,
        45
      ],
      "sync_points": [
        {
          "beat": 0,
          "action": "hook_text_pop"
        },
        {
          "beat": 3,
          "action": "problem_reveal"
        },
        {
          "beat": 10,
          "action": "solution_point_1"
        },
        {
          "beat": 15,
          "action": "pattern_interrupt"
        },
        {
          "beat": 22,
          "action": "solution_point_2"
        },
        {
          "beat": 30,
          "action": "solution_point_3"
        },
        {
          "beat": 45,
          "action": "cta_fade_in"
        }
      ],
      "drop_moment": "15s",
      "energy_curve": "build_0-15s, sustain_15-40s, outro_40-50s"
    },
    "call_to_action": "Follow for more system design tips!",
    "engagement_tactics": {
      "comment_bait": "Which rate limiter do you prefer: Leaky Bucket or Token Bucket? Drop a comment! 👇",
      "save_trigger": "Save this for your next system design interview where rate limiting is crucial 💾",
      "share_trigger": "Tag someone building scalable systems who needs smooth traffic flow! 🔥",
      "pattern_interrupt": "Color flash + zoom at 15s mark on the Leaky Bucket overflowing visualization.",
      "loop_element": "CTA references stabilizing traffic, connecting back to the hook's problem statement."
    },
    "caption_structured": {
      "hook_125chars": "Stop letting uncontrolled traffic spikes crash your backend services. The Leaky Bucket algorithm is the system design fix you need. 🛡️",
      "problem_statement": "If your API experiences sudden, massive bursts of requests, traditional throttling might fail, leading to resource exhaustion and 503 errors. Scalability requires predictable traffic flow, not just dropping requests randomly.",
      "solution_tease": "The Leaky Bucket approach guarantees traffic shaping for rock-solid stability.",
      "value_props": [
        "✓ Guarantees a constant output rate (traffic shaping)",
        "✓ Prevents resource exhaustion during peak loads",
        "✓ Simple queue implementation for rate limiting"
      ],
      "keywords_woven": "Mastering **Rate Limiting** is essential for **System Design**. The **Leaky Bucket** algorithm ensures **Traffic Shaping** for highly **Scalability** and robust **Distributed Systems**.",
      "comment_bait": "Which rate limiter do you prefer: Leaky Bucket or Token Bucket? Drop a comment! 👇",
      "cta": "Save this 💾 + Follow @systemdesign for more deep dives into architecture!",
      "link": "https://example.com/topic/19111?utm_source=instagram&utm_medium=reel"
    },
    "caption": "Stop letting uncontrolled traffic spikes crash your backend services. The Leaky Bucket algorithm is the system design fix you need. 🛡️\n\nIf your API experiences sudden, massive bursts of requests, traditional throttling might fail, leading to resource exhaustion and 503 errors. Scalability requires predictable traffic flow, not just dropping requests randomly.\n\nThe Leaky Bucket approach guarantees traffic shaping for rock-solid stability.\n\n✓ Guarantees a constant output rate (traffic shaping)\n✓ Prevents resource exhaustion during peak loads\n✓ Simple queue implementation for rate limiting\n\nMastering **Rate Limiting** is essential for **System Design**. The **Leaky Bucket** algorithm ensures **Traffic Shaping** for highly **Scalability** and robust **Distributed Systems**.\n\nWhich rate limiter do you prefer: Leaky Bucket or Token Bucket? Drop a comment! 👇\n\nSave this 💾 + Follow @systemdesign for more deep dives into architecture! Full guide: https://example.com/topic/19111?utm_source=instagram&utm_medium=reel",
    "hashtags": [
      "#leakybucket",
      "#ratelimiting",
      "#trafficshaping",
      "#systemdesign",
      "#scalability",
      "#distributed",
      "#microservices",
      "#architecture",
      "#engineering",
      "#software",
      "#backend",
      "#api",
      "#concurrency",
      "#loadbalancing",
      "#tech",
      "#programming",
      "#coding",
      "#softwareengineering",
      "#computerscience",
      "#devops",
      "#interview",
      "#techinterview",
      "#codinginterview",
      "#systemdesigninterview",
      "#techskills",
      "#learninpublic",
      "#codinglife",
      "#performance",
      "#tokenbucket"
    ],
    "music_suggestion": "Energetic tech beat, 90-120 BPM, minimal instrumental",
    "image_prompts": [
      {
        "role": "cover_hook",
        "title": "Reel Cover — Hook Driven (Main)",
        "prompt": "VERTICAL 9:16 Instagram Reel cover for 'The Leaky Bucket Algorithm for Traffic Shaping and Rate Limiting'. FIRST FRAME OPTIMIZED for thumbnail and scroll-stopping. COMPOSITION: Top 25%: Bold hook text 'STOP BURSTY TRAFFIC SPIKES' in 120-140px geometric sans, Indigo (#4F46E5) accent color. Middle 50%: Simplified vector visualization of a bucket filling rapidly with drops (burst) but only leaking slowly at the bottom (constant output). Thin lines, subtle grid. Bottom 25%: Subtle brand handle @systemdesign. TECHNICAL SPECS: Background: Off-white (#FAFAFA). Safe margins: ≥96px all sides. Text contrast: 4.5:1 minimum. Thumbnail readable: Text must be clear at 200x355px. STYLE: Flat vector, elegant minimalism, technical yet accessible.",
        "negative_prompt": "no clutter, no busy backgrounds, no photoreal faces, no brand logos except tiny watermark, no neon, no 3D bevels, no fake UI chrome, no stock icon noise, no gradients >5%, no drop shadows, no text baked into complex diagram",
        "style_notes": "Whiteboard-meets-editorial; technical yet accessible; elegant minimalism; thumbnail-optimized",
        "accessibility": {
          "alt_text": "Instagram Reel cover for The Leaky Bucket Algorithm for Traffic Shaping and Rate Limiting with bold hook text and simplified Leaky Bucket diagram showing input spikes and steady output.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Dyslexic-friendly geometric sans"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "cover_alt",
        "title": "Reel Cover Alt — Typography Focus (A/B Test)",
        "prompt": "Alternative vertical cover for A/B testing. TYPOGRAPHY-FOCUSED design for 'The Leaky Bucket Algorithm for Traffic Shaping and Rate Limiting'. LAYOUT: Minimalist, text-first approach. Center-aligned 2-line hook 'GUARANTEED TRAFFIC SHAPING' in bold geometric sans. Underline 'SHAPING'. Small, abstract Indigo bucket icon on the side. STYLE: Same color palette as cover_hook but different emphasis. More whitespace, bolder typography, minimal visual elements. Still readable at thumbnail size.",
        "negative_prompt": "no clutter, no busy backgrounds, no photoreal faces, no brand logos except tiny watermark, no neon, no 3D bevels, no fake UI chrome, no stock icon noise, no gradients >5%, no drop shadows, no text baked into complex diagram",
        "style_notes": "Editorial poster; strong kerning; minimal visual noise; text-centric",
        "accessibility": {
          "alt_text": "Alternative Reel cover with typographic emphasis on 'Guaranteed Traffic Shaping' for The Leaky Bucket Algorithm.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Dyslexic-friendly"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "diagram_hero",
        "title": "Core Concept Diagram (Primary Teaching Visual)",
        "prompt": "Vertical hero diagram for 'The Leaky Bucket Algorithm'. PRIMARY EDUCATIONAL VISUAL. COMPOSITION: A large, clearly labeled Leaky Bucket visualization occupying middle 60%. Arrows show bursty, uneven input flow (red) entering the bucket (queue), and a smooth, constant output flow (blue) leaking from the bottom. Clear labels for 'Input Traffic', 'Bucket Queue', and 'Constant Output Rate'. Use Indigo and Sky Blue accents.",
        "negative_prompt": "no 3D, no photos, no clutter, no decorative elements that distract from learning",
        "style_notes": "Diagram-first; educational clarity; high legibility; concept over aesthetics",
        "accessibility": {
          "alt_text": "Hero diagram explaining the Leaky Bucket Algorithm showing bursty input traffic being smoothed into a constant output rate by a queue.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear labels, dyslexic-friendly"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "comparison",
        "title": "Leaky Bucket vs Token Bucket Comparison",
        "prompt": "Split vertical comparison chart showing 'Leaky Bucket' (top 45%) vs 'Token Bucket' (bottom 45%). Leaky Bucket side focuses on traffic smoothing/shaping (uniform output line). Token Bucket side focuses on maximum burst allowance (spiky output line, capped). Use clear labels: 'LEAKY BUCKET: SHAPING' and 'TOKEN BUCKET: ALLOWANCE'. Use Indigo for Leaky Bucket, and Cyan for Token Bucket.",
        "negative_prompt": "no clutter, no 3D, no confusing layouts, avoid complex graphs",
        "style_notes": "Clear contrast; easy comparison; visual distinction between options",
        "accessibility": {
          "alt_text": "Comparison showing Leaky Bucket (traffic shaping) versus Token Bucket (burst allowance) rate limiting approaches.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear labels"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "stat_card",
        "title": "Key Metrics/Numbers Visualization (Guaranteed Rate)",
        "prompt": "Bold stat card emphasizing the guaranteed output rate. LAYOUT: Large number (180px bold) at center: '1000 QPS'. Context text above: 'GUARANTEED THROUGHPUT'. Context text below: 'Regardless of Input Burst'. Supporting visual element: a stable, flat line graph in Sky Blue. Domain accent color for number.",
        "negative_prompt": "no clutter, no stock icons, no decorative fluff, no confusing metrics",
        "style_notes": "Number-first; high impact; memorable; clear context",
        "accessibility": {
          "alt_text": "Statistics card showing a guaranteed throughput of '1000 QPS' regardless of input burst, illustrated by a stable line graph.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Large numbers, clear context"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "process_flow",
        "title": "Step-by-Step Request Flow",
        "prompt": "Vertical flow diagram showing the Leaky Bucket logic flow. 3 steps stacked vertically. Step 1: Request Arrives (Input). Step 2: Check Bucket Capacity (Queue Check). Step 3: Accept or Drop (Output decision). Arrows connecting steps top-to-bottom. Use Indigo for boxes and Sky Blue for arrows. Clean, minimal, educational.",
        "negative_prompt": "no clutter, no 3D, no complex diagrams, avoid confusing decision branches",
        "style_notes": "Flow-focused; clear progression; numbered steps; easy to follow",
        "accessibility": {
          "alt_text": "Process flow diagram showing 3 steps of Leaky Bucket execution: Request Arrives, Check Bucket Capacity, and Accept or Drop.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Step numbers and labels clear"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "cta_endcard",
        "title": "Call-to-Action Endcard (Final Frame)",
        "prompt": "Final CTA endcard for 'Leaky Bucket Algorithm'. Center-focused. Bold CTA text at center: 'Save this 💾 & Follow'. Brand handle @systemdesign clearly visible at bottom. Small icons for Save/Follow/Share actions. Clean, minimal, Indigo accent color.",
        "negative_prompt": "no clutter, no busy backgrounds, no multiple competing CTAs",
        "style_notes": "CTA-first; clear single action; brand visible; action-oriented",
        "accessibility": {
          "alt_text": "Call-to-action endcard with Save, Follow, and Share prompts for The Leaky Bucket Algorithm, featuring the @systemdesign handle.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear CTA text"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "architecture_diagram",
        "title": "API Gateway Implementation Architecture",
        "prompt": "Vertical system architecture diagram showing where the Leaky Bucket algorithm sits. Components stacked: Client -> API Gateway (labeled 'Rate Limiter: Leaky Bucket') -> Backend Services (Database, Microservices). Highlight the API Gateway component using a bright Sky Blue color to show its importance in traffic control.",
        "negative_prompt": "no clutter, no 3D, no complex cloud icons, focus on flow and simple boxes",
        "style_notes": "System design focus; clear component hierarchy; functional diagram",
        "accessibility": {
          "alt_text": "Architecture diagram showing the Leaky Bucket Rate Limiter implemented within the API Gateway, protecting downstream backend services.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear component labels"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "data_flow",
        "title": "Request Flow Visualization (Smoothing)",
        "prompt": "Visualization of data flow over time. Two parallel horizontal lines representing 'Input' (top) and 'Output' (bottom). Input line shows highly uneven, bursty request arrivals (spikes). Output line shows perfectly smooth, even request distribution. Use animated arrows to show requests queuing and then releasing evenly. Title: 'Smoothing Bursty Traffic'.",
        "negative_prompt": "no confusing axes, no complex charts, must be visually intuitive",
        "style_notes": "Flow visualization; clear differentiation between input and output patterns",
        "accessibility": {
          "alt_text": "Data flow visualization demonstrating how the Leaky Bucket smooths bursty input traffic into a uniform output stream.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Labels for input and output"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      },
      {
        "role": "scale_metrics",
        "title": "Latency Comparison Graph",
        "prompt": "Simple vertical bar chart comparing latency metrics. Two bars: 'Without Leaky Bucket' (Tall Red Bar, high latency) and 'With Leaky Bucket' (Short Blue Bar, low, stable latency). Clear labels showing typical latency values (e.g., 500ms vs 50ms). Title: 'Latency Stabilization'. Minimalist graph style.",
        "negative_prompt": "no complex data sets, no line graphs, only simple bar comparison",
        "style_notes": "Metric comparison; high visual impact; clear improvement shown",
        "accessibility": {
          "alt_text": "Bar chart comparing latency: high latency without Leaky Bucket versus low, stable latency with Leaky Bucket implemented.",
          "color_contrast_ratio": "4.5:1",
          "font_accessibility": "Clear axis labels and values"
        },
        "ratio": "9:16",
        "size_px": "1080x1920"
      }
    ],
    "accessibility": {
      "auto_captions": [
        {
          "time": "0.0s",
          "text": "Stop letting bursty traffic crash your services."
        },
        {
          "time": "1.8s",
          "text": "You need robust rate limiting."
        },
        {
          "time": "3.0s",
          "text": "Uncontrolled traffic spikes lead to resource exhaustion, 503 errors, and massive instability."
        },
        {
          "time": "8.5s",
          "text": "The challenge is smoothing out the flow."
        },
        {
          "time": "10.0s",
          "text": "Enter the Leaky Bucket Algorithm."
        },
        {
          "time": "11.5s",
          "text": "It’s simple, effective, and guarantees a constant output rate."
        },
        {
          "time": "15.0s",
          "text": "Think of it as a physical bucket."
        },
        {
          "time": "16.5s",
          "text": "Incoming requests are water drops."
        },
        {
          "time": "18.5s",
          "text": "If the bucket overflows, the request is dropped immediately."
        },
        {
          "time": "22.0s",
          "text": "The bucket has a constant leak rate, representing the maximum processing capacity."
        },
        {
          "time": "26.5s",
          "text": "This ensures output traffic is always uniform, regardless of input bursts."
        },
        {
          "time": "30.0s",
          "text": "Unlike the Token Bucket, Leaky Bucket strictly enforces traffic shaping, smoothing out those sudden spikes."
        },
        {
          "time": "38.0s",
          "text": "Use Leaky Bucket at your API gateway or load balancer to protect critical downstream services from overload."
        },
        {
          "time": "45.0s",
          "text": "Protect your system stability."
        },
        {
          "time": "46.5s",
          "text": "Save this reel and follow for more deep dives into system architecture!"
        }
      ],
      "alt_texts_provided": true,
      "color_contrast_validated": true,
      "audio_descriptions": [
        "Visuals transition rapidly between diagrams of input spikes and smooth output streams, emphasizing the queueing mechanism.",
        "At 15 seconds, a visual pattern interrupt occurs, highlighting the moment an incoming request is dropped due to an overflowing bucket."
      ]
    },
    "compliance": {
      "est_duration_seconds": 50,
      "script_word_count": 140,
      "hook_char_count": 71,
      "hashtag_count": 30,
      "image_count": 10,
      "checks": [
        "≤150 words script",
        "≤120 chars hook",
        "CTA present once",
        "30 unique hashtags",
        "mobile-safe margins ≥96px",
        "image_prompts length ≥7 (7 core + domain-specific)",
        "all images have accessibility object",
        "text_animations provided for all on_screen_text",
        "transitions specified between all segments",
        "engagement_tactics all present",
        "auto_captions with timestamps",
        "first_frame optimized for thumbnail",
        "pattern_interrupt at 15-20s",
        "music_sync_points aligned to beats",
        "caption_structured format followed",
        "all 7 core image roles present: cover_hook, cover_alt, diagram_hero, comparison, stat_card, process_flow, cta_endcard"
      ]
    }
  }
}